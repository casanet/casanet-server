basePath: /API
consumes:
    - application/json
definitions:
    ErrorResponse:
        description: 'Error response.'
        properties:
            responseCode:
                type: number
                format: double
                description: 'error code in system.'
            message:
                type: string
                description: 'Readble message.'
                x-nullable: true
        required:
            - responseCode
        type: object
    Login:
        description: 'Login schema model.'
        properties:
            email:
                type: string
            password:
                type: string
        required:
            - email
            - password
        type: object
    LocalNetworkDevice:
        description: 'Represents any physical device in a local network.'
        properties:
            name:
                type: string
                description: 'Display name.'
                x-nullable: true
            mac:
                type: string
                description: 'The MAC address of the device, the value is unique to each device.'
            vendor:
                type: string
                description: 'Info about device manufacturer.'
                x-nullable: true
            ip:
                type: string
                description: 'The device IP address, if exist it should be unique in network.'
                x-nullable: true
        required:
            - mac
        type: object
    MinionDevice:
        description: 'Represents a physical device kind with network info.'
        properties:
            pysicalDevice:
                $ref: '#/definitions/LocalNetworkDevice'
                description: 'The physical network device.'
            brand:
                type: string
                description: 'The brand of device.'
            model:
                type: string
                description: 'The specific model of the device.'
            token:
                type: string
                description: 'Some devices require a token for communication API.'
                x-nullable: true
            deviceId:
                type: string
                description: 'Some devices require id for communication API.'
                x-nullable: true
        required:
            - pysicalDevice
            - brand
            - model
        type: object
    Toggle:
        description: "A toggle value, the toggle is on way communicated device,\r\nFor example wall light switches with 433 RF that can turn on or off \r\nbut there is no way to know the real light status if someone changes the light status using physical switche."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
        required:
            - status
        type: object
    Switch:
        description: "A switch status.\r\n  Used for simple devices that can be turned on or off. *and minion status is readable*\r\nThe properties same as a toggle, and the difference is logic only (if that status is readable or not)."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
        required:
            - status
        type: object
    Roller:
        description: "A roller switch stauts.\r\nA roller is a switch for curtains or blinds (or for any other needs) that can drag up/down or stop."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            direction:
                type: string
                enum:
                    - up
                    - down
                description: 'drag direction'
        required:
            - status
            - direction
        type: object
    Cleaner:
        description: "A Cleaner (robot) stauts.\r\nCleaner is a smart robot for cleaning home."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            mode:
                type: string
                enum:
                    - dock
                    - clean
                description: 'Cleaner mode'
            fanSpeed:
                type: string
                enum:
                    - low
                    - med
                    - high
                    - auto
                description: 'Suction strength'
        required:
            - status
            - mode
            - fanSpeed
        type: object
    AirConditioning:
        description: 'An AC status.'
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            temperature:
                type: integer
                format: int32
                description: 'Valid AC temperatur. (minimum 16° maximum 30°).'
                minimum: 16
                maximum: 30
            mode:
                type: string
                enum:
                    - hot
                    - cold
                    - dry
                    - auto
            fanStrength:
                type: string
                enum:
                    - low
                    - med
                    - high
                    - auto
        required:
            - status
            - temperature
            - mode
            - fanStrength
        type: object
    Light:
        description: "A simple light status.\r\nUsed to devices that can chang it's brightness."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            brightness:
                type: integer
                format: int32
                description: 'Minimum 1% maximum 100% of light brightness.'
                minimum: 1
                maximum: 100
        required:
            - status
            - brightness
        type: object
    TemperatureLight:
        description: "A light simple light status.\r\nUsed to devices that can chang also light temperature (warm or cold light)."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            brightness:
                type: integer
                format: int32
                description: 'Minimum 1% maximum 100% of light brightness.'
                minimum: 1
                maximum: 100
            temperature:
                type: integer
                format: int32
                description: 'Spectrum is 1% to warm light and 100% to cold light.'
                minimum: 1
                maximum: 100
        required:
            - status
            - brightness
            - temperature
        type: object
    ColorLight:
        description: "A light simple light status.\r\nUsed to devices that can change also light color (RGB)."
        properties:
            status:
                type: string
                enum:
                    - on
                    - off
            brightness:
                type: integer
                format: int32
                description: 'Minimum 1% maximum 100% of light brightness.'
                minimum: 1
                maximum: 100
            temperature:
                type: integer
                format: int32
                description: 'Spectrum is 1% to warm light and 100% to cold light.'
                minimum: 1
                maximum: 100
            red:
                type: integer
                format: int32
                description: "Minimum 0 maximum 255 from red color.\r\nValid color value. (8 bits number, minimum 0 maximum 255)."
                minimum: 0
                maximum: 255
            green:
                type: integer
                format: int32
                description: "Minimum 0 maximum 255 from green color.\r\nValid color value. (8 bits number, minimum 0 maximum 255)."
                minimum: 0
                maximum: 255
            blue:
                type: integer
                format: int32
                description: "Minimum 0 maximum 255 from blue color.\r\nValid color value. (8 bits number, minimum 0 maximum 255)."
                minimum: 0
                maximum: 255
        required:
            - status
            - brightness
            - temperature
            - red
            - green
            - blue
        type: object
    MinionStatus:
        description: 'Minion status, the available values depend on the minion type.'
        properties:
            toggle:
                $ref: '#/definitions/Toggle'
                x-nullable: true
            switch:
                $ref: '#/definitions/Switch'
                x-nullable: true
            roller:
                $ref: '#/definitions/Roller'
                x-nullable: true
            cleaner:
                $ref: '#/definitions/Cleaner'
                x-nullable: true
            airConditioning:
                $ref: '#/definitions/AirConditioning'
                x-nullable: true
            light:
                $ref: '#/definitions/Light'
                x-nullable: true
            temperatureLight:
                $ref: '#/definitions/TemperatureLight'
                x-nullable: true
            colorLight:
                $ref: '#/definitions/ColorLight'
                x-nullable: true
        type: object
    Minion:
        description: "Represents a minion in system.\r\nMinion is a logic device in the system, meaning that a device is a physical device and minion is a logic device \r\nthat uses a physical device to switch home kit status. For example, an IR transmitter can be one physical device \r\nfor a few minions, one to central AC control and second for secondary AC control \r\nso in it will be two totally different minions that use one physical device."
        properties:
            minionId:
                type: string
                description: 'Minion unique id.'
                x-nullable: true
            name:
                type: string
                description: 'The display name for a minion.'
            device:
                $ref: '#/definitions/MinionDevice'
                description: 'Physical device of minion.'
            isProperlyCommunicated:
                type: boolean
                description: 'Is communication with device status ok.'
                x-nullable: true
            minionStatus:
                $ref: '#/definitions/MinionStatus'
                description: 'Status of minion (based on minion type).'
            minionType:
                type: string
                enum:
                    - toggle
                    - switch
                    - roller
                    - cleaner
                    - airConditioning
                    - light
                    - temperatureLight
                    - colorLight
                description: 'Minion type.'
            minionAutoTurnOffMS:
                type: number
                format: double
                description: "Auto turns  off duration, *if* set member value then the minion will turn off in X ms after turning it on, \r\nUsed for example in boiler minion etc."
                x-nullable: true
        required:
            - name
            - device
            - minionStatus
            - minionType
        type: object
    MinionFeed:
        description: 'Minion feed object.'
        properties:
            event:
                type: string
                enum:
                    - created
                    - update
                    - removed
            minion:
                $ref: '#/definitions/Minion'
        required:
            - event
            - minion
        type: object
    DailySunTrigger:
        description: 'Daily timing based on sun triggers.'
        properties:
            days:
                type: array
                items:
                    type: string
                    enum:
                        - sunday
                        - monday
                        - tuesday
                        - wednesday
                        - thursday
                        - friday
                        - saturday
                description: 'Selected days in a week.'
            durationMinutes:
                type: number
                format: double
                description: "Minutes from the sun trigger.\r\ncan be before or after the sun triggers.\r\nFor example, to invoke 40 minutes before sunset set -40 and to invoke 40 minutes after sunset set 40.\r\n\r\nNOTE! if the duration is more then minutes available in the day from the sun trigger time, the timing will not activate. \r\nfor example if the sunset is in 18:00 and the duration set to 7*60 minutes, \r\nthe activate time is not on the same day, so it will not activate at all."
            sunTrigger:
                type: string
                enum:
                    - sunrise
                    - sunset
                description: 'Sun trigger.'
        required:
            - days
            - durationMinutes
            - sunTrigger
        type: object
    DailyTimeTrigger:
        description: 'Daily timing based on time in a day.'
        properties:
            days:
                type: array
                items:
                    type: string
                    enum:
                        - sunday
                        - monday
                        - tuesday
                        - wednesday
                        - thursday
                        - friday
                        - saturday
                description: 'Selected days in a week.'
            hour:
                type: integer
                format: int32
                description: 'The hour in a day.'
                minimum: 0
                maximum: 23
            minutes:
                type: integer
                format: int32
                description: 'Minutes in an hour.'
                minimum: 0
                maximum: 59
        required:
            - days
            - hour
            - minutes
        type: object
    OnceTiming:
        description: 'Once timing struct.'
        properties:
            date:
                type: number
                format: double
                description: 'UTC time.'
        required:
            - date
        type: object
    TimeoutTiming:
        description: 'Timeout timing struct.'
        properties:
            startDate:
                type: number
                format: double
                description: 'UTC time.'
            durationInMimutes:
                type: number
                format: double
                description: 'Duration to activate timing from the start timeout time in minutes.'
        required:
            - startDate
            - durationInMimutes
        type: object
    TimingProperties:
        description: 'Timing properties, values depend on timing type.'
        properties:
            dailySunTrigger:
                $ref: '#/definitions/DailySunTrigger'
                x-nullable: true
            dailyTimeTrigger:
                $ref: '#/definitions/DailyTimeTrigger'
                x-nullable: true
            once:
                $ref: '#/definitions/OnceTiming'
                x-nullable: true
            timeout:
                $ref: '#/definitions/TimeoutTiming'
                x-nullable: true
        type: object
    Timing:
        description: 'Represents a timing in the system.'
        properties:
            timingId:
                type: string
                description: 'Timing unique id.'
            timingName:
                type: string
                description: 'Timing display name.'
            triggerOperationId:
                type: string
                description: 'Operation id to invoke.'
            isActive:
                type: boolean
                description: 'Is timing active or not.'
            timingType:
                type: string
                enum:
                    - dailySunTrigger
                    - dailyTimeTrigger
                    - once
                    - timeout
                description: 'The timing type.'
            timingProperties:
                $ref: '#/definitions/TimingProperties'
                description: 'The timing properties.'
        required:
            - timingId
            - timingName
            - triggerOperationId
            - isActive
            - timingType
            - timingProperties
        type: object
    OperationResult:
        description: 'Operation result s, hold set minion status result per minion.'
        properties:
            minionId:
                type: string
                description: 'Minion Id.'
            error:
                $ref: '#/definitions/ErrorResponse'
                description: 'Set a minion status results. (undefined if sets successfully).'
                x-nullable: true
        required:
            - minionId
        type: object
    TimingFeed:
        description: 'Timing feed object.'
        properties:
            timing:
                $ref: '#/definitions/Timing'
            results:
                type: array
                items:
                    $ref: '#/definitions/OperationResult'
        required:
            - timing
            - results
        type: object
    DeviceKind:
        description: 'For each supported device, there are limitations and abilities of it.'
        properties:
            brand:
                type: string
                description: 'The brand of the current minion type. (see device model).'
            model:
                type: string
                description: 'The specific model of minion type. (see device model).'
            minionsPerDevice:
                type: number
                format: double
                description: "The max minions that can be in one device, or -1 if unlimited.\r\nFor example, a simple smart socket can be 1 minion per device, \r\nWall switch with 3 switches can be 3 minions per device,\r\nAnd IR transmitter can be unlimited minions per device."
            isTokenRequierd:
                type: boolean
                description: 'Is the device require a token for communication API.'
            isIdRequierd:
                type: boolean
                description: 'Is device require id for communication API.'
            suppotedMinionType:
                type: string
                enum:
                    - toggle
                    - switch
                    - roller
                    - cleaner
                    - airConditioning
                    - light
                    - temperatureLight
                    - colorLight
                description: 'Supported minion type for the current device.'
            isRecordingSupported:
                type: boolean
                description: 'Some of the devices supported recording (for example IR transmitter).'
        required:
            - brand
            - model
            - minionsPerDevice
            - isTokenRequierd
            - isIdRequierd
            - suppotedMinionType
            - isRecordingSupported
        type: object
    SetMinionAutoTurnOff:
        description: 'Used to change the minion auto turn off the timeout value.'
        properties:
            setAutoTurnOffMS:
                type: number
                format: double
                description: 'The timeout duration in ms, to turn off set 0 as valse.'
        required:
            - setAutoTurnOffMS
        type: object
    IftttOnChanged:
        description: "Ifttt webhook request body to notify minion status changed.\r\n*Used in ifttt module interface only*"
        properties:
            localMac:
                type: string
                description: 'Allow remote-server to forward request to local server'
                x-nullable: true
            deviceId:
                type: string
                description: 'Device id (AKA Ifttt webhook API key), this is the authentication of request.'
            newStatus:
                type: string
                enum:
                    - on
                    - off
                description: 'The new status'
        required:
            - deviceId
            - newStatus
        type: object
    OperationActivity:
        description: 'Represents acivity.'
        properties:
            minionId:
                type: string
                description: 'Minion id to set'
            minionStatus:
                $ref: '#/definitions/MinionStatus'
                description: 'Status to set to minion.'
        required:
            - minionId
            - minionStatus
        type: object
    Operation:
        description: "Represents an operation in the system.\r\nAn operation is a set of activities to do.\r\nFor example, to turn on all home light operation \r\nsets an array of activity for each light in the home to set light status 'on'."
        properties:
            operationId:
                type: string
                description: 'Operation unique id.'
            operationName:
                type: string
                description: 'Operation display name.'
            activities:
                type: array
                items:
                    $ref: '#/definitions/OperationActivity'
                description: 'Activities array.'
        required:
            - operationId
            - operationName
            - activities
        type: object
    User:
        description: 'Represents a user in the system.'
        properties:
            displayName:
                type: string
                description: Name
                x-nullable: true
            email:
                type: string
                description: 'User email'
            sessionTimeOutMS:
                type: number
                format: double
                description: 'The time duration for a session in milliseconds (1/1000 from second).'
            password:
                type: string
                description: 'User password.'
                x-nullable: true
            ignoreTfa:
                type: boolean
                description: 'Ignore 2-step verification on login or not.'
            scope:
                type: string
                enum:
                    - adminAuth
                    - userAuth
                    - iftttAuth
                description: 'User scopes.'
        required:
            - email
            - sessionTimeOutMS
            - ignoreTfa
            - scope
        type: object
    UserForwardAuth:
        properties:
            code:
                type: string
                description: 'Generated code that sent to user email account'
                minLength: 6
                maxLength: 6
        required:
            - code
        type: object
    RemoteSettings:
        description: 'Remote server settings.'
        properties:
            host:
                type: string
                description: 'hostname / IP of the remote server'
            connectionKey:
                type: string
                description: 'Access key for authorization local server in the remote server'
        required:
            - host
            - connectionKey
        type: object
    IftttIntegrationSettings:
        description: 'Ifttt integration settings'
        properties:
            apiKey:
                type: string
                description: 'WebHooks API key'
                x-nullable: true
            enableIntegration:
                type: boolean
                description: 'Open or close ifttt integration.'
        required:
            - enableIntegration
        type: object
    IftttRawActionTriggerd:
        description: 'Ifttt trigger with all request data in one JSON struct.'
        properties:
            apiKey:
                type: string
                description: 'WebHooks API key'
            localMac:
                type: string
                description: 'Allow remote-server to forward request to local server'
                x-nullable: true
            minionId:
                type: string
            setStatus:
                type: string
                enum:
                    - on
                    - off
        required:
            - apiKey
            - minionId
            - setStatus
        type: object
    IftttActionTriggered:
        description: 'Ifttt trigger set status action'
        properties:
            apiKey:
                type: string
                description: 'WebHooks API key'
            localMac:
                type: string
                description: 'Allow remote-server to forward request to local server'
                x-nullable: true
            setStatus:
                type: string
                enum:
                    - on
                    - off
        required:
            - apiKey
            - setStatus
        type: object
    IftttActionTriggeredRequest:
        description: 'Ifttt trigger action auth and forward fields'
        properties:
            apiKey:
                type: string
                description: 'WebHooks API key'
            localMac:
                type: string
                description: 'Allow remote-server to forward request to local server'
                x-nullable: true
        required:
            - apiKey
        type: object
info:
    title: 'CASAnet - API'
    version: 2.0.0
    description: 'IoT server for local home network. hosted in [GitHub repo](https://github.com/haimkastner/Home-IoT-Server).'
    license:
        name: ISC
paths:
    '/auth/logout-sessions/{userId}':
        post:
            operationId: LogoutSessions
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Logout from all activate sessions.'
            tags:
                - Authentication
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters:
                -
                    in: path
                    name: userId
                    required: true
                    type: string
    /auth/login:
        post:
            operationId: LoginDocumentation
            produces:
                - application/json
            responses:
                '201':
                    description: '2-fatore code sent'
                '204':
                    description: 'No content'
                '403':
                    description: 'Auth fail'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
                '422':
                    description: 'Invalid schema'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: Login.
            tags:
                - Authentication
            security: []
            parameters:
                -
                    in: body
                    name: login
                    required: true
                    schema:
                        $ref: '#/definitions/Login'
    /auth/login/tfa:
        post:
            operationId: LoginTfaDocumentation
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '403':
                    description: 'Auth fail'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
                '422':
                    description: 'Invalid schema'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: '2-step verification login.'
            tags:
                - Authentication
            security: []
            parameters:
                -
                    in: body
                    name: login
                    required: true
                    schema:
                        $ref: '#/definitions/Login'
    /auth/logout:
        post:
            operationId: LogoutDocumentation
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Logout manually from the system.'
            tags:
                - Authentication
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    /feed/minions:
        get:
            operationId: GetMinionsFeed
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/MinionFeed'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Minions feed.\r\nwhen minion status changed minion created etc."
            tags:
                - Feeds
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    /feed/timings:
        get:
            operationId: GetTimingFeed
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/TimingFeed'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Timing feed.\r\nwhen timing activated."
            tags:
                - Feeds
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    /devices:
        get:
            operationId: GetDevices
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/LocalNetworkDevice'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all devices in the local network.'
            tags:
                - Devices
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    /devices/kinds:
        get:
            operationId: GetDevicesKinds
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/DeviceKind'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all supported devices kind info.'
            tags:
                - Devices
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    '/devices/{deviceMac}':
        put:
            operationId: SetDeviceName
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Set name to a device.'
            tags:
                - Devices
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Device mac address.'
                    in: path
                    name: deviceMac
                    required: true
                    type: string
                -
                    in: body
                    name: device
                    required: true
                    schema:
                        $ref: '#/definitions/LocalNetworkDevice'
    /devices/rescan:
        post:
            operationId: RescanDevices
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Rescan all devices in LAN.\r\nUsed when there are changes in the local network.\r\nFor example, if the router (DHCP server) change IP's of devices or new device connect to the local network etc."
            tags:
                - Devices
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    /minions:
        get:
            operationId: GetMinions
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Minion'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all minions in the system.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
        post:
            operationId: CreateMinion
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Creates a new minion.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'The new minion to create.'
                    in: body
                    name: minion
                    required: true
                    schema:
                        $ref: '#/definitions/Minion'
    '/minions/{minionId}':
        get:
            operationId: GetMinion
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/Minion'
            description: 'Get minion by id.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    in: path
                    name: minionId
                    required: true
                    type: string
        put:
            operationId: SetMinion
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Update minion status.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'Minion status to set.'
                    in: body
                    name: setStatus
                    required: true
                    schema:
                        $ref: '#/definitions/MinionStatus'
        delete:
            operationId: DeleteMinion
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Delete minion from the system.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
    '/minions/timeout/{minionId}':
        put:
            operationId: SetMinionTimeout
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Update minion auto turns off timeout.'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'Timeout property.'
                    in: body
                    name: setTimeout
                    required: true
                    schema:
                        $ref: '#/definitions/SetMinionAutoTurnOff'
    '/minions/commands/record/{minionId}':
        post:
            operationId: RecordMinionCommand
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Record a command (IR, 433-RF or any other supported RF tech)\r\nfor current minion status."
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'Minion object status to get command for.'
                    in: body
                    name: minionStatus
                    required: true
                    schema:
                        $ref: '#/definitions/MinionStatus'
    '/minions/commands/generate/{minionId}':
        post:
            operationId: GenerateMinionCommand
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Generate a command (IR, 433-RF or any other supported RF tech)\r\nfor current minion status."
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'Minion object status to generate command for.'
                    in: body
                    name: minionStatus
                    required: true
                    schema:
                        $ref: '#/definitions/MinionStatus'
    '/minions/rescan/{minionId}':
        post:
            operationId: RescanMinionStatus
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Recheck minion device status (update server status cache).'
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    in: path
                    name: minionId
                    required: true
                    type: string
    /minions/rescan:
        post:
            operationId: RescanMinionsStatus
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Recheck every minion device status (update server status cache).\r\nNote that this is not the devices scan!\r\nThis scanning only checks every minion API to know the current status."
            tags:
                - Minions
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
    '/minions/{minionId}/ifttt':
        put:
            operationId: NotifyMinionStatusChanged
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Notify minion status changed by ifttt webhook (https://ifttt.com/maker_webhooks).'
            tags:
                - Minions
            security: []
            parameters:
                -
                    description: 'Minon id.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'Minion key amd status to set.'
                    in: body
                    name: iftttOnChanged
                    required: true
                    schema:
                        $ref: '#/definitions/IftttOnChanged'
    /operations:
        get:
            operationId: GetOperations
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Operation'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all operations in the system.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
        post:
            operationId: CreateOperation
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Creates a new operation.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'The new operation to create.'
                    in: body
                    name: operation
                    required: true
                    schema:
                        $ref: '#/definitions/Operation'
    '/operations/{operationId}':
        get:
            operationId: GetOperation
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/Operation'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get operation by id.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    in: path
                    name: operationId
                    required: true
                    type: string
        put:
            operationId: SetOperation
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Update operation properties.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'OperationId id.'
                    in: path
                    name: operationId
                    required: true
                    type: string
                -
                    description: 'Operation object to update to.'
                    in: body
                    name: operation
                    required: true
                    schema:
                        $ref: '#/definitions/Operation'
        delete:
            operationId: DeleteOperation
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Delete operation from the system.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Operation id.'
                    in: path
                    name: operationId
                    required: true
                    type: string
    '/operations/trigger/{operationId}':
        post:
            operationId: TriggerOperation
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/OperationResult'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Invoke operation.'
            tags:
                - Operations
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Operation id.'
                    in: path
                    name: operationId
                    required: true
                    type: string
    /timings:
        get:
            operationId: GetTimings
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Timing'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all the timings in the system.'
            tags:
                - Timings
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters: []
        post:
            operationId: CreateTiming
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Creates a new timing.'
            tags:
                - Timings
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'The new timing to create.'
                    in: body
                    name: timing
                    required: true
                    schema:
                        $ref: '#/definitions/Timing'
    '/timings/{timingId}':
        get:
            operationId: GetTiming
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/Timing'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get timing by id.'
            tags:
                - Timings
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    in: path
                    name: timingId
                    required: true
                    type: string
        put:
            operationId: SetTiming
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Update timing properties.'
            tags:
                - Timings
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Timing id.'
                    in: path
                    name: timingId
                    required: true
                    type: string
                -
                    description: 'Timing object to update to.'
                    in: body
                    name: timing
                    required: true
                    schema:
                        $ref: '#/definitions/Timing'
        delete:
            operationId: DeleteTiming
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Delete timing from the system.'
            tags:
                - Timings
            security:
                -
                    userAuth: []
                -
                    adminAuth: []
            parameters:
                -
                    description: 'Timing id.'
                    in: path
                    name: timingId
                    required: true
                    type: string
    /users/profile:
        get:
            operationId: GetProfile
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/User'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get user profile.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters: []
    '/users/forward-auth/{userId}':
        post:
            operationId: RequestUserForwarding
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Reqest registration code.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters:
                -
                    description: 'User id/email to send code to.'
                    in: path
                    name: userId
                    required: true
                    type: string
    /users/forward:
        get:
            operationId: GetRegisteredUsers
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            type: string
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get registered users for forwarding from remote to local.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters: []
    '/users/forward/{userId}':
        post:
            operationId: RequestUserForwardingAuth
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Register account to allow forward HTTP requests from remote to local server.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters:
                -
                    description: 'User id/email to register.'
                    in: path
                    name: userId
                    required: true
                    type: string
                -
                    in: body
                    name: auth
                    required: true
                    schema:
                        $ref: '#/definitions/UserForwardAuth'
        delete:
            operationId: RemoveUserForwarding
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Remove account from local server valid account to forward from remote to local'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters:
                -
                    description: 'User id/email to unregister.'
                    in: path
                    name: userId
                    required: true
                    type: string
    /users:
        get:
            operationId: GetUsers
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get all users in the system.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters: []
        post:
            operationId: CreateUser
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Creates a new user.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
            parameters:
                -
                    description: 'The new user to create.'
                    in: body
                    name: user
                    required: true
                    schema:
                        $ref: '#/definitions/User'
    '/users/{userId}':
        get:
            operationId: GetUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/User'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get user by id.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters:
                -
                    in: path
                    name: userId
                    required: true
                    type: string
        put:
            operationId: SetUser
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Update user properties.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters:
                -
                    description: 'User id.'
                    in: path
                    name: userId
                    required: true
                    type: string
                -
                    description: 'User object to update to.'
                    in: body
                    name: user
                    required: true
                    schema:
                        $ref: '#/definitions/User'
        delete:
            operationId: DeleteUser
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Delete user from the system.'
            tags:
                - Users
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters:
                -
                    description: 'User id.'
                    in: path
                    name: userId
                    required: true
                    type: string
    /remote:
        get:
            operationId: GetRemoteHost
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Get remote server host/IP.\r\nor empty if not set."
            tags:
                - Remote
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters: []
        put:
            operationId: SetRemoteSettings
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Connect to remote server with given remote settings.'
            tags:
                - Remote
            security:
                -
                    adminAuth: []
            parameters:
                -
                    in: body
                    name: remoteSettings
                    required: true
                    schema:
                        $ref: '#/definitions/RemoteSettings'
        delete:
            operationId: RemoveRemoteSettings
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Remove and disconnect remote server connection.'
            tags:
                - Remote
            security:
                -
                    adminAuth: []
            parameters: []
    /remote/status:
        get:
            operationId: GetConnectionStatus
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                        enum:
                            - notConfigured
                            - cantReachRemoteServer
                            - authorizationFail
                            - localServerDisconnected
                            - connectionOK
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Get connection status to remote status.'
            tags:
                - Remote
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters: []
    /remote/machine-mac:
        get:
            operationId: GetMachineMac
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Get local casa-server machine mac address.\r\nUsed when creating a new local server in a remote server."
            tags:
                - Remote
            security:
                -
                    adminAuth: []
            parameters: []
    '/static/**/*':
        get:
            operationId: GetStaticsAssets
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                '404':
                    description: 'Page not found'
            description: 'Get public assets for casa-net client side.'
            tags:
                - Public
            security: []
            parameters: []
    /ifttt/settings:
        get:
            operationId: IsIftttEnabled
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: boolean
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Is IFTTT inegration enabled.'
            tags:
                - Ifttt
            security:
                -
                    adminAuth: []
                -
                    userAuth: []
            parameters: []
        put:
            operationId: SetIftttIntegrationSettings
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Put ifttt integration settings.'
            tags:
                - Ifttt
            security:
                -
                    adminAuth: []
            parameters:
                -
                    in: body
                    name: iftttIntegrationSettings
                    required: true
                    schema:
                        $ref: '#/definitions/IftttIntegrationSettings'
    /ifttt/trigger/minions/raw:
        post:
            operationId: TriggeredSomeAction
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: "Ifttt webhooks triggering casa-net action API.\r\nwhen all details in body only, to allow send all data ion one text line.\r\nExample to use: SMS trigger has only simple text that can pass to IFTTT activity,\r\nand by current request, it is possible to control any minion by one single line of text. \r\nso fill the SMS text with JSON and by IFTTT set it to be the request body."
            tags:
                - Ifttt
            security:
                -
                    iftttAuth: []
            parameters:
                -
                    in: body
                    name: iftttRawActionTriggerd
                    required: true
                    schema:
                        $ref: '#/definitions/IftttRawActionTriggerd'
    '/ifttt/trigger/minions/{minionId}':
        post:
            operationId: TriggeredMinionAction
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Ifttt webhooks triggering casa-net *minion* action API.'
            tags:
                - Ifttt
            security:
                -
                    iftttAuth: []
            parameters:
                -
                    description: 'minion to set status.'
                    in: path
                    name: minionId
                    required: true
                    type: string
                -
                    description: 'status to set.'
                    in: body
                    name: iftttActionTriggered
                    required: true
                    schema:
                        $ref: '#/definitions/IftttActionTriggered'
    '/ifttt/trigger/operations/{operationId}':
        post:
            operationId: TriggeredOperationAction
            produces:
                - application/json
            responses:
                '204':
                    description: 'No content'
                '501':
                    description: 'Server error'
                    schema:
                        $ref: '#/definitions/ErrorResponse'
            description: 'Ifttt webhooks triggering casa-net *operation* action API.'
            tags:
                - Ifttt
            security:
                -
                    iftttAuth: []
            parameters:
                -
                    description: 'operation to invoke.'
                    in: path
                    name: operationId
                    required: true
                    type: string
                -
                    description: 'Ifttt request auth and redirect data.'
                    in: body
                    name: iftttActionTriggeredRequest
                    required: true
                    schema:
                        $ref: '#/definitions/IftttActionTriggeredRequest'
produces:
    - application/json
swagger: '2.0'
securityDefinitions:
    userAuth:
        type: apiKey
        name: Cookie
        in: header
    adminAuth:
        type: apiKey
        name: Cookie
        in: header
    iftttAuth:
        type: apiKey
        name: apiKey
        in: header
host: 'localhost:3000'
tags:
    -
        name: Authentication
        description: 'Manage system authentication, such as login logout etc.'
    -
        name: Devices
        description: 'Pysical device in local home managing.'
    -
        name: Users
        description: 'Manage users in system.'
    -
        name: Minions
        description: 'Manage the minions (logic devices in system) in home, such as turn on off etc.'
    -
        name: Operations
        description: 'Manage operation in system, such as create operation to turn on all home lights etc.'
    -
        name: Timings
        description: 'Manage timings in system, such as invoke turn off lights operation today 12 AM etc.'
    -
        name: Ifttt
        description: 'Manage IFTTT (https://ifttt.com/) integration and allow to turn on/off any device by any Ifttt trigger and to trigger by minion on/off event.'
    -
        name: Feeds
        description: 'Feed of updates from system, such as minion turned on/off etc. all using SSE protocol'
    -
        name: Remote
        description: 'Manage the remote server connection, used to access local server via www'
    -
        name: Public
        description: 'Static files/assets for client side'
schemes:
    - http
    - https
